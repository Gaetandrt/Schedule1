package com.example.scheduleapp.presentation.add_edit_routine

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.scheduleapp.domain.model.Routine
import com.example.scheduleapp.domain.repository.RoutineRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.flow.receiveAsFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

sealed class AddEditRoutineEvent {
    data object SaveSuccess : AddEditRoutineEvent()
    data class ShowError(val message: String) : AddEditRoutineEvent()
}

@HiltViewModel
class AddEditRoutineViewModel @Inject constructor(
    private val routineRepository: RoutineRepository
    // TODO: Add SavedStateHandle if needed for editing existing routines
) : ViewModel() {

    private val _eventChannel: Channel<AddEditRoutineEvent> = Channel()
    val events: kotlinx.coroutines.flow.Flow<AddEditRoutineEvent> = _eventChannel.receiveAsFlow()

    fun saveRoutine(name: String, description: String?, time: String): Unit {
        if (name.isBlank()) {
            sendEvent(AddEditRoutineEvent.ShowError("Name cannot be empty"))
            return
        }
        // Basic time format validation (can be improved)
        if (!time.matches(Regex("\\d{2}:\\d{2}"))) {
            sendEvent(AddEditRoutineEvent.ShowError("Time must be in HH:mm format"))
            return
        }

        viewModelScope.launch {
            try {
                val newRoutine = Routine(
                    name = name,
                    description = description?.takeIf { it.isNotBlank() }, // Store null if blank
                    scheduleTime = time
                    // ID will be auto-generated by Room
                )
                routineRepository.addRoutine(newRoutine)
                sendEvent(AddEditRoutineEvent.SaveSuccess)
            } catch (e: Exception) {
                // Log exception e
                sendEvent(AddEditRoutineEvent.ShowError("Failed to save routine: ${e.message}"))
            }
        }
    }

    private fun sendEvent(event: AddEditRoutineEvent): Unit {
        viewModelScope.launch {
            _eventChannel.send(event)
        }
    }
}